//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tree")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub url_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub tree_entry_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::tree_entry::Entity",
        from = "Column::TreeEntryId",
        to = "super::tree_entry::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TreeEntry,
    #[sea_orm(
        belongs_to = "super::url::Entity",
        from = "Column::UrlId",
        to = "super::url::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Url,
}

impl Related<super::tree_entry::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TreeEntry.def()
    }
}

impl Related<super::url::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Url.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
